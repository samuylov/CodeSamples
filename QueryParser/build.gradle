apply plugin: 'application'


configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

ext.antlr = [
    grammarpackage: "ru.samuylov.queryparser.parser",
    antlrSource: 'src/main/antlr',
    destinationDir: "src/main/generated"
]


mainClassName = "ru.samuylov.queryparser.ParserApplication"
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

dependencies {
	antlr4 "org.antlr:antlr4:4.6"

	compile "org.antlr:antlr4-runtime:4.6"
	compile "org.apache.commons:commons-lang3:3.4"
	compile "org.slf4j:slf4j-api:1.7.21"
	compile "org.slf4j:slf4j-log4j12:1.7.21"
	compile "org.elasticsearch.client:transport:6.1.3"
	compile "org.jetbrains:annotations:15.0"
	compile("org.apache.nifi:nifi-toolkit-encrypt-config:1.5.0"){ transitive = false }

	
	testCompile "junit:junit:4.12"
}



task antlrOutputDir << {
    mkdir(antlr.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from ANTLR4 grammars.'

    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)

    def grammars = fileTree(antlr.antlrSource).include('QueryLexer.g4').include('QueryParser.g4')
	
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", "-no-visitor", "-no-listener", "-package", antlr.grammarpackage, grammars.files].flatten()

}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}